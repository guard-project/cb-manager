{
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-catalog",
      "description": "Represents an agent in the catalog."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "agent-instance",
      "description": "Represents an agent instance installed in an execution environment."
    },
    {
      "name": "algorithm-catalog",
      "description": "Represents an algorithm in the catalog."
    },
    {
      "name": "algorithm-catalog",
      "description": "Represents an algorithm in the catalog."
    },
    {
      "name": "algorithm-instance",
      "description": "Represents an algorithm instance."
    },
    {
      "name": "algorithm-instance",
      "description": "Represents an algorithm instance."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution\n       environments and network links."
    },
    {
      "name": "connection",
      "description": "Represents an connection between execution\n       environments and network links."
    },
    [],
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "data",
      "description": "Represents the stored data."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-catalog",
      "description": "Represents an eBPF program in the catalog."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program instance installed\n       in an execution environment."
    },
    {
      "name": "ebpf-program-instance",
      "description": "Represents an eBPF program instance installed\n       in an execution environment."
    },
    {
      "name": "event",
      "description": "Represents the stored events."
    },
    {
      "name": "event",
      "description": "Represents the stored events."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env",
      "description": "Represents an execution environment."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "exec-env-type",
      "description": "Represents an execution environment type."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link",
      "description": "Represents a network link."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    {
      "name": "network-link-type",
      "description": "Represents a network link type."
    },
    {
      "name": "pipeline",
      "description": "Represents the stored pipelines."
    },
    {
      "name": "pipeline",
      "description": "Represents the stored pipelines."
    }
  ],
  "paths": {
    "/catalog/agent/": {
      "delete": {
        "summary": "Agent catalog Delete (Multiple).",
        "description": "Delete agent catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Agent catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more agent catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "agent catalog Read (Multiple).",
        "description": "Get the list of agent catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of agent catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get agent catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Agent catalog Creation (Multiple)",
        "description": "Create new agent catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "201": {
            "description": "Agent catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create agent catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more agent catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Agent catalog Update (Multiple).",
        "description": "Update agent catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Agent catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update agent catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more agent catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more agent catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/catalog/agent/{_id}": {
      "delete": {
        "summary": "Agent catalog Delete (Multiple).",
        "description": "Delete agent catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Agent catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more agent catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "agent catalog Read (Multiple).",
        "description": "Get the list of agent catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of agent catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get agent catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Agent catalog Creation (Multiple)",
        "description": "Create new agent catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "201": {
            "description": "Agent catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create agent catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more agent catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Agent catalog Update (Multiple).",
        "description": "Update agent catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Agent catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update agent catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more agent catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more agent catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/agent/": {
      "delete": {
        "summary": "Agent instance Delete (Multiple).",
        "description": "Delete agent instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "205": {
            "description": "All Agent instances correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent instances based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more agent instances based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "agent instance Read (Multiple).",
        "description": "Get the list of agent instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "List of agent instances filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get agent instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Agent instance Creation (Multiple)",
        "description": "Create new agent instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "201": {
            "description": "Agent instance correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create agent instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more agent instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Agent instance Update (Multiple).",
        "description": "Update agent instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "All Agent instances correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update agent instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more agent instances not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more agent instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/agent/{_id}": {
      "delete": {
        "summary": "Agent instance Delete (Multiple).",
        "description": "Delete agent instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "205": {
            "description": "All Agent instances correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent instances based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more agent instances based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "agent instance Read (Multiple).",
        "description": "Get the list of agent instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "List of agent instances filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Agent instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get agent instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Agent instance Creation (Multiple)",
        "description": "Create new agent instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "201": {
            "description": "Agent instance correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create agent instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more agent instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Agent instance Update (Multiple).",
        "description": "Update agent instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "agent-instance"
        ],
        "responses": {
          "200": {
            "description": "All Agent instances correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update agent instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more agent instances not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more agent instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/catalog/algorithm/": {
      "delete": {
        "summary": "Algorithm catalog Delete (Multiple).",
        "description": "Delete algorithm catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Algorithm catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more algorithm catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "algorithm catalog Read (Multiple).",
        "description": "Get the list of algorithm catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of algorithm catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get algorithm catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Algorithm catalog Creation (Multiple)",
        "description": "Create new algorithm catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "201": {
            "description": "Algorithm catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create algorithm catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more algorithm catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Algorithm catalog Update (Multiple).",
        "description": "Update algorithm catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Algorithm catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update algorithm catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more algorithm catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more algorithm catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/catalog/algorithm/{_id}": {
      "delete": {
        "summary": "Algorithm catalog Delete (Multiple).",
        "description": "Delete algorithm catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Algorithm catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more algorithm catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "algorithm catalog Read (Multiple).",
        "description": "Get the list of algorithm catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of algorithm catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get algorithm catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Algorithm catalog Creation (Multiple)",
        "description": "Create new algorithm catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "201": {
            "description": "Algorithm catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create algorithm catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more algorithm catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Algorithm catalog Update (Multiple).",
        "description": "Update algorithm catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Algorithm catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update algorithm catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more algorithm catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more algorithm catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/algorithm/": {
      "delete": {
        "summary": "Algorithm instance Delete (Multiple).",
        "description": "Delete algorithm instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "205": {
            "description": "All Algorithm instances correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm instances based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more algorithm instances based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "algorithm instance Read (Multiple).",
        "description": "Get the list of algorithm instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "200": {
            "description": "List of algorithm instances filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get algorithm instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Algorithm instance Creation (Multiple)",
        "description": "Create new algorithm instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "201": {
            "description": "Algorithm instance correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create algorithm instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more algorithm instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Algorithm instance Update (Multiple).",
        "description": "Update algorithm instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "200": {
            "description": "All Algorithm instances correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update algorithm instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more algorithm instances not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more algorithm instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/algorithm/{_id}": {
      "delete": {
        "summary": "Algorithm instance Delete (Multiple).",
        "description": "Delete algorithm instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "205": {
            "description": "All Algorithm instances correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm instances based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more algorithm instances based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "algorithm instance Read (Multiple).",
        "description": "Get the list of algorithm instances filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "200": {
            "description": "List of algorithm instances filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Algorithm instance based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get algorithm instances with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Algorithm instance Creation (Multiple)",
        "description": "Create new algorithm instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "201": {
            "description": "Algorithm instance correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create algorithm instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more algorithm instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Algorithm instance Update (Multiple).",
        "description": "Update algorithm instances.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlgorithmInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "algorithm-instance"
        ],
        "responses": {
          "200": {
            "description": "All Algorithm instances correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update algorithm instances based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more algorithm instances not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more algorithm instances based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/connection/": {
      "delete": {
        "summary": "Connection Delete (Multiple).",
        "description": "Delete connections filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "205": {
            "description": "All Connections correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Connections based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more connections based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "connection Read (Multiple).",
        "description": "Get the list of connections filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "List of connections filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Connection based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get connections with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Connection Creation (Multiple)",
        "description": "Create new connections.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "201": {
            "description": "Connection correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create connections based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more connections based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Update (Multiple).",
        "description": "Update connections.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "All Connections correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update connections based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more connections not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more connections based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/connection/{_id}": {
      "delete": {
        "summary": "Connection Delete (Multiple).",
        "description": "Delete connections filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "205": {
            "description": "All Connections correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Connections based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more connections based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "connection Read (Multiple).",
        "description": "Get the list of connections filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "List of connections filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Connection based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get connections with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Connection Creation (Multiple)",
        "description": "Create new connections.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "201": {
            "description": "Connection correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create connections based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more connections based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Connection Update (Multiple).",
        "description": "Update connections.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionSchema"
              }
            }
          }
        ],
        "tags": [
          "connection"
        ],
        "responses": {
          "200": {
            "description": "All Connections correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update connections based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more connections not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more connections based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/dashboard": {
      "get": {}
    },
    "/dashboard/{part}/{resource}": {
      "get": {}
    },
    "/data/": {
      "delete": {
        "summary": "Data Delete (Multiple).",
        "description": "Delete data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "205": {
            "description": "All Data correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Data based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more data based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "data Read (Multiple).",
        "description": "Get the list of data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "List of data filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Data based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get data with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Data Creation (Multiple)",
        "description": "Create new data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "201": {
            "description": "Data correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create data based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more data based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Multiple).",
        "description": "Update data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "All Data correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update data based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more data not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more data based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/data/{_id}": {
      "delete": {
        "summary": "Data Delete (Multiple).",
        "description": "Delete data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "205": {
            "description": "All Data correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Data based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more data based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "data Read (Multiple).",
        "description": "Get the list of data filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "List of data filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Data based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get data with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Data Creation (Multiple)",
        "description": "Create new data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "201": {
            "description": "Data correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create data based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more data based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Data Update (Multiple).",
        "description": "Update data.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataSchema"
              }
            }
          }
        ],
        "tags": [
          "data"
        ],
        "responses": {
          "200": {
            "description": "All Data correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update data based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more data not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more data based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/": {
      "delete": {
        "summary": "Ebpf program catalog Delete (Multiple).",
        "description": "Delete eBPF program catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Ebpf program catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more eBPF program catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF program catalog Read (Multiple).",
        "description": "Get the list of eBPF program catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF program catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get eBPF program catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Ebpf program catalog Creation (Multiple)",
        "description": "Create new eBPF program catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "201": {
            "description": "Ebpf program catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create eBPF program catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more eBPF program catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Ebpf program catalog Update (Multiple).",
        "description": "Update eBPF program catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Ebpf program catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF program catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more eBPF program catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more eBPF program catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/catalog/ebpf-program/{_id}": {
      "delete": {
        "summary": "Ebpf program catalog Delete (Multiple).",
        "description": "Delete eBPF program catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "205": {
            "description": "All Ebpf program catalogs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program catalogs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more eBPF program catalogs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF program catalog Read (Multiple).",
        "description": "Get the list of eBPF program catalogs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF program catalogs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program catalog based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get eBPF program catalogs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Ebpf program catalog Creation (Multiple)",
        "description": "Create new eBPF program catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "201": {
            "description": "Ebpf program catalog correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create eBPF program catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more eBPF program catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Ebpf program catalog Update (Multiple).",
        "description": "Update eBPF program catalogs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramCatalogSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-catalog"
        ],
        "responses": {
          "200": {
            "description": "All Ebpf program catalogs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF program catalogs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more eBPF program catalogs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more eBPF program catalogs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/": {
      "delete": {
        "summary": "Ebpf program Delete (Multiple).",
        "description": "Delete eBPF programs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "205": {
            "description": "All Ebpf programs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf programs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more eBPF programs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF program Read (Multiple).",
        "description": "Get the list of eBPF programs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF programs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get eBPF programs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Ebpf program Creation (Multiple)",
        "description": "Create new eBPF programs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "201": {
            "description": "Ebpf program correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create eBPF programs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more eBPF programs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Ebpf program Update (Multiple).",
        "description": "Update eBPF programs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "All Ebpf programs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF programs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more eBPF programs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more eBPF programs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/instance/ebpf-program/{_id}": {
      "delete": {
        "summary": "Ebpf program Delete (Multiple).",
        "description": "Delete eBPF programs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "205": {
            "description": "All Ebpf programs correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf programs based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more eBPF programs based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "eBPF program Read (Multiple).",
        "description": "Get the list of eBPF programs filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "List of eBPF programs filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Ebpf program based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get eBPF programs with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Ebpf program Creation (Multiple)",
        "description": "Create new eBPF programs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "201": {
            "description": "Ebpf program correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create eBPF programs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more eBPF programs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Ebpf program Update (Multiple).",
        "description": "Update eBPF programs.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/_eBPFProgramInstanceSchema"
              }
            }
          }
        ],
        "tags": [
          "ebpf-program-instance"
        ],
        "responses": {
          "200": {
            "description": "All Ebpf programs correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update eBPF programs based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more eBPF programs not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more eBPF programs based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/event/": {
      "delete": {
        "summary": "Event Delete (Multiple).",
        "description": "Delete event filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "205": {
            "description": "All Event correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Event based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more event based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "event Read (Multiple).",
        "description": "Get the list of event filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "200": {
            "description": "List of event filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Event based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get event with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Event Creation (Multiple)",
        "description": "Create new event.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "201": {
            "description": "Event correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create event based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more event based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Event Update (Multiple).",
        "description": "Update event.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "200": {
            "description": "All Event correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update event based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more event not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more event based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/event/{_id}": {
      "delete": {
        "summary": "Event Delete (Multiple).",
        "description": "Delete event filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "205": {
            "description": "All Event correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Event based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more event based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "event Read (Multiple).",
        "description": "Get the list of event filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "200": {
            "description": "List of event filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Event based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get event with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Event Creation (Multiple)",
        "description": "Create new event.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "201": {
            "description": "Event correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create event based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more event based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Event Update (Multiple).",
        "description": "Update event.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventSchema"
              }
            }
          }
        ],
        "tags": [
          "event"
        ],
        "responses": {
          "200": {
            "description": "All Event correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update event based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more event not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more event based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/exec-env/": {
      "delete": {
        "summary": "Execution environment Delete (Multiple).",
        "description": "Delete execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "205": {
            "description": "All Execution environments correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environments based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more execution environments based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "execution environment Read (Multiple).",
        "description": "Get the list of execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "List of execution environments filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get execution environments with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Execution environment Creation (Multiple)",
        "description": "Create new execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "201": {
            "description": "Execution environment correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create execution environments based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more execution environments based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Execution environment Update (Multiple).",
        "description": "Update execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "All Execution environments correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update execution environments based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more execution environments not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more execution environments based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/exec-env/{_id}": {
      "delete": {
        "summary": "Execution environment Delete (Multiple).",
        "description": "Delete execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "205": {
            "description": "All Execution environments correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environments based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more execution environments based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "execution environment Read (Multiple).",
        "description": "Get the list of execution environments filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "List of execution environments filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get execution environments with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Execution environment Creation (Multiple)",
        "description": "Create new execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "201": {
            "description": "Execution environment correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create execution environments based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more execution environments based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Execution environment Update (Multiple).",
        "description": "Update execution environments.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env"
        ],
        "responses": {
          "200": {
            "description": "All Execution environments correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update execution environments based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more execution environments not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more execution environments based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/type/exec-env/": {
      "delete": {
        "summary": "Execution environment type Delete (Multiple).",
        "description": "Delete execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "205": {
            "description": "All Execution environment types correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment types based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more execution environment types based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "execution environment type Read (Multiple).",
        "description": "Get the list of execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "List of execution environment types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get execution environment types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Execution environment type Creation (Multiple)",
        "description": "Create new execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "201": {
            "description": "Execution environment type correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create execution environment types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more execution environment types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Execution environment type Update (Multiple).",
        "description": "Update execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "All Execution environment types correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update execution environment types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more execution environment types not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more execution environment types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/exec-env-type/{_id}": {
      "delete": {
        "summary": "Execution environment type Delete (Multiple).",
        "description": "Delete execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "205": {
            "description": "All Execution environment types correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment types based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more execution environment types based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "execution environment type Read (Multiple).",
        "description": "Get the list of execution environment types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "List of execution environment types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Execution environment type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get execution environment types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Execution environment type Creation (Multiple)",
        "description": "Create new execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "201": {
            "description": "Execution environment type correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create execution environment types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more execution environment types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Execution environment type Update (Multiple).",
        "description": "Update execution environment types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecEnvTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "exec-env-type"
        ],
        "responses": {
          "200": {
            "description": "All Execution environment types correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update execution environment types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more execution environment types not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more execution environment types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/network-link/": {
      "delete": {
        "summary": "Network link Delete (Multiple).",
        "description": "Delete network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "205": {
            "description": "All Network links correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network links based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more network links based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "network link Read (Multiple).",
        "description": "Get the list of network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "List of network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get network links with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Network link Creation (Multiple)",
        "description": "Create new network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "201": {
            "description": "Network link correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create network links based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more network links based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Network link Update (Multiple).",
        "description": "Update network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "All Network links correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update network links based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more network links not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more network links based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/network-link/{_id}": {
      "delete": {
        "summary": "Network link Delete (Multiple).",
        "description": "Delete network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "205": {
            "description": "All Network links correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network links based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more network links based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "network link Read (Multiple).",
        "description": "Get the list of network links filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "List of network links filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get network links with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Network link Creation (Multiple)",
        "description": "Create new network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "201": {
            "description": "Network link correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create network links based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more network links based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Network link Update (Multiple).",
        "description": "Update network links.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link"
        ],
        "responses": {
          "200": {
            "description": "All Network links correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update network links based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more network links not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more network links based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/type/network-link/": {
      "delete": {
        "summary": "Network link type Delete (Multiple).",
        "description": "Delete network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "205": {
            "description": "All Network link types correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link types based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more network link types based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "network link type Read (Multiple).",
        "description": "Get the list of network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "List of network link types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get network link types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Network link type Creation (Multiple)",
        "description": "Create new network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "201": {
            "description": "Network link type correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create network link types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more network link types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Network link type Update (Multiple).",
        "description": "Update network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "All Network link types correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update network link types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more network link types not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more network link types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/type/network-link/{_id}": {
      "delete": {
        "summary": "Network link type Delete (Multiple).",
        "description": "Delete network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "205": {
            "description": "All Network link types correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link types based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more network link types based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "network link type Read (Multiple).",
        "description": "Get the list of network link types filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "List of network link types filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Network link type based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get network link types with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Network link type Creation (Multiple)",
        "description": "Create new network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "201": {
            "description": "Network link type correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create network link types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more network link types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Network link type Update (Multiple).",
        "description": "Update network link types.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkLinkTypeSchema"
              }
            }
          }
        ],
        "tags": [
          "network-link-type"
        ],
        "responses": {
          "200": {
            "description": "All Network link types correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update network link types based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more network link types not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more network link types based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/pipeline/": {
      "delete": {
        "summary": "Pipeline Delete (Multiple).",
        "description": "Delete pipeline filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "205": {
            "description": "All Pipeline correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Pipeline based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more pipeline based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "pipeline Read (Multiple).",
        "description": "Get the list of pipeline filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "200": {
            "description": "List of pipeline filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Pipeline based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get pipeline with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Pipeline Creation (Multiple)",
        "description": "Create new pipeline.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "201": {
            "description": "Pipeline correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create pipeline based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more pipeline based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Pipeline Update (Multiple).",
        "description": "Update pipeline.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "200": {
            "description": "All Pipeline correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update pipeline based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more pipeline not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more pipeline based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    },
    "/pipeline/{_id}": {
      "delete": {
        "summary": "Pipeline Delete (Multiple).",
        "description": "Delete pipeline filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "205": {
            "description": "All Pipeline correctly deleted.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reset_Content_Response_Schema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Pipeline based on the request query not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to delete one or more pipeline based on the request query.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Reset_Content_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "get": {
        "summary": "pipeline Read (Multiple).",
        "description": "Get the list of pipeline filtered by the query in the request body.",
        "parameters": [
          {
            "in": "body",
            "required": true,
            "name": "payload",
            "schema": {
              "$ref": "#/definitions/QueryRequestSchema"
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "200": {
            "description": "List of pipeline filtered by the query in the request body.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "404": {
            "description": "Pipeline based on the request _query_ not found.",
            "schema": {
              "$ref": "#/definitions/Not_Found_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to get pipeline with the request _query_.",
            "schema": {
              "$ref": "#/definitions/Unprocessable_Entity_Response_Schema"
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "post": {
        "summary": "Pipeline Creation (Multiple)",
        "description": "Create new pipeline.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "201": {
            "description": "Pipeline correctly created.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Created_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to create pipeline based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to create ore or more pipeline based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Created_Response_Schema",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      },
      "put": {
        "summary": "Pipeline Update (Multiple).",
        "description": "Update pipeline.",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PipelineSchema"
              }
            }
          }
        ],
        "tags": [
          "pipeline"
        ],
        "responses": {
          "200": {
            "description": "All Pipeline correctly updated.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ok_Response_Schema"
              }
            }
          },
          "204": {
            "description": "No content to update pipeline based on the request.",
            "schema": {
              "$ref": "#/definitions/No_Content_Response_Schema"
            }
          },
          "304": {
            "description": "Update for one or more pipeline not necessary.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response"
                ]
              }
            }
          },
          "400": {
            "description": "Request not valid.",
            "schema": {
              "$ref": "#/definitions/Bad_Request_Response_Schema"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Unauthorized_Response_Schema"
            }
          },
          "406": {
            "description": "Request validation failed.",
            "schema": {
              "$ref": "#/definitions/Not_Acceptable_Response_Schema"
            }
          },
          "415": {
            "description": "Media type not supported.",
            "schema": {
              "$ref": "#/definitions/Unsupported_Media_Type_Response_Schema"
            }
          },
          "422": {
            "description": "Not possible to update one or more pipeline based on the request.",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  "Ok_Response_Schema",
                  "Not_Modified_Response",
                  "Unprocessable_Entity_Response_Schema"
                ]
              }
            }
          },
          "500": {
            "description": "Server not available to satisfy the request.",
            "schema": {
              "$ref": "#/definitions/Internal_Server_Error_Response_Schema"
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Context Broker Manager",
    "version": "1.0.4"
  },
  "swagger": "2.0",
  "definitions": {
    "QueryRequestLimitSchema": {
      "type": "object",
      "properties": {
        "to": {
          "type": "integer",
          "example": 5,
          "description": "Ended index of the items to return."
        },
        "from": {
          "type": "integer",
          "example": 1,
          "description": "Started index of the items to return."
        }
      }
    },
    "QueryRequestOrderSchema": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc",
          "description": "Order mode."
        },
        "target": {
          "type": "string",
          "example": "name",
          "description": "The field to compare."
        }
      },
      "required": [
        "mode",
        "target"
      ]
    },
    "QueryRequestFilterSchema": {
      "type": "object",
      "properties": {
        "expr": {
          "type": "string",
          "example": "apache",
          "description": "The expression to compare to the field."
        },
        "target": {
          "type": "string",
          "example": "id",
          "description": "The field to compare."
        }
      },
      "required": [
        "expr",
        "target"
      ]
    },
    "QueryRequestClauseSchema": {
      "type": "object",
      "properties": {
        "lte": {
          "description": "The target field must be lower or equal to the expr value..",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "equals": {
          "description": "The target field must be equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "gt": {
          "description": "The target field must be greater to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "not": {
          "description": "The clause has to be not satisfied.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClauseSchema"
            }
          ]
        },
        "wildcard": {
          "description": "The target field must be satisfy the wildcard in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "or": {
          "description": "At least the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClauseSchema"
          }
        },
        "reg_exp": {
          "description": "The target field must be satisfy the regular expression in expr.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "lt": {
          "description": "The target field must be lower than the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        },
        "and": {
          "description": "All the clause has to be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestClauseSchema"
          }
        },
        "gte": {
          "description": "The target field must be greater or equal to the expr value.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestFilterSchema"
            }
          ]
        }
      }
    },
    "QueryRequestSchema": {
      "type": "object",
      "properties": {
        "force": {
          "type": "boolean",
          "example": true,
          "description": "Force the execution of the request even there are some errors (example: delete a inconsistent entries)."
        },
        "select": {
          "type": "array",
          "example": "id",
          "description": "Fields to return.",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "description": "Limit the number of items to return.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestLimitSchema"
            }
          ]
        },
        "order": {
          "description": "Order the filtered items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QueryRequestOrderSchema"
          }
        },
        "where": {
          "description": "Filter the items based on different conditions.",
          "allOf": [
            {
              "$ref": "#/definitions/QueryRequestClauseSchema"
            }
          ]
        }
      }
    },
    "AgentCatalogActionConfigSchema": {
      "type": "object",
      "properties": {
        "cmd": {
          "type": "string",
          "example": "service filebeat start",
          "description": "Action command."
        },
        "args": {
          "type": "array",
          "example": "-v",
          "description": "Action command argument",
          "items": {
            "type": "string"
          }
        },
        "daemon": {
          "type": "boolean",
          "example": true,
          "description": "Execute the command as daemon."
        }
      },
      "required": [
        "cmd"
      ]
    },
    "AgentCatalogActionSchema": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Update the status the of the agent-instance if the command is executed correctly."
        },
        "id": {
          "type": "string",
          "example": "start",
          "description": "Action name"
        },
        "description": {
          "type": "string",
          "example": "Start the execution of the agent.",
          "description": "Short description of the agent actions."
        },
        "config": {
          "description": "Action config.",
          "allOf": [
            {
              "$ref": "#/definitions/AgentCatalogActionConfigSchema"
            }
          ]
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "AgentCatalogResourceConfigSchema": {
      "type": "object",
      "properties": {
        "path": {
          "type": "array",
          "example": "/usr/share/filebeat/filebeat.yml",
          "description": "File path.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "path"
      ]
    },
    "AgentCatalogResourceSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Resource id."
        },
        "description": {
          "type": "string",
          "example": "Filebeat configuration file.",
          "description": "Short description of the resource."
        },
        "config": {
          "description": "Resource configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/AgentCatalogResourceConfigSchema"
            }
          ]
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "AgentCatalogParameterConfigSchema": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "example": "/usr/share/filebeat/filebeat.yml",
          "description": "Path of the source parameter file"
        },
        "schema": {
          "type": "string",
          "enum": [
            "properties",
            "json",
            "xml",
            "yaml"
          ],
          "example": "properties",
          "description": "Schema of the parameter file"
        },
        "path": {
          "type": "array",
          "example": "enabled",
          "description": "Path of the parameter value in the file",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "path",
        "schema",
        "source"
      ]
    },
    "AgentCatalogParameterSchema": {
      "type": "object",
      "properties": {
        "example": {
          "example": "10s",
          "description": "Example of parameter value."
        },
        "id": {
          "type": "string",
          "example": "log-period",
          "description": "Parameter id."
        },
        "type": {
          "type": "string",
          "enum": [
            "binary",
            "boolean",
            "choice",
            "integer",
            "number",
            "time-duration",
            "string"
          ],
          "example": "binary",
          "description": "Parameter type."
        },
        "description": {
          "type": "string",
          "example": "Enable the agent.",
          "description": "Short description of the parameter."
        },
        "values": {
          "type": "array",
          "example": "mysql",
          "description": "Possible values if the parameter type is choice.",
          "items": {
            "type": "string"
          }
        },
        "list": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the parameter can have multiple values."
        },
        "config": {
          "description": "Parameter configuration.",
          "allOf": [
            {
              "$ref": "#/definitions/AgentCatalogParameterConfigSchema"
            }
          ]
        }
      },
      "required": [
        "config",
        "id",
        "type"
      ]
    },
    "AgentCatalogSchema": {
      "type": "object",
      "properties": {
        "deployment_source": {
          "type": "array",
          "example": "https://www.example.com/k8s-artefact.yaml",
          "description": "Link to the deployment sources",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "description": "Action properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogActionSchema"
          }
        },
        "id": {
          "type": "string",
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        },
        "resources": {
          "description": "Resource properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogResourceSchema"
          }
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from execution environments.",
          "description": "Short description of the agent."
        },
        "parameters": {
          "description": "Parameter properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentCatalogParameterSchema"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "AgentInstanceParameterSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "period",
          "description": "Parameter id."
        }
      },
      "required": [
        "id"
      ]
    },
    "AgentInstanceActionSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "list",
          "description": "Action id."
        },
        "output_format": {
          "type": "string",
          "enum": [
            "plain",
            "lines",
            "json"
          ],
          "example": "lines",
          "description": "Output format for stdout and stderr result of action execution."
        }
      },
      "required": [
        "id"
      ]
    },
    "AgentInstanceResourceSchema": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "example": "period: 10s",
          "description": "Resource content."
        },
        "id": {
          "type": "string",
          "example": "filebeat-config",
          "description": "Resource id."
        }
      },
      "required": [
        "content",
        "id"
      ]
    },
    "AgentInstanceOperationSchema": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "List of agent instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceParameterSchema"
          }
        },
        "actions": {
          "description": "List of agent instance actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceActionSchema"
          }
        },
        "resources": {
          "description": "List of agent instance resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceResourceSchema"
          }
        }
      }
    },
    "AgentInstanceSchema": {
      "type": "object",
      "properties": {
        "agent_catalog_id": {
          "type": "string",
          "example": "filebeat",
          "description": "Id of the agent in the catalog."
        },
        "status": {
          "type": "string",
          "enum": [
            "started",
            "stopped",
            "unknown"
          ],
          "example": "started",
          "description": "Status of the agent."
        },
        "operations": {
          "description": "List of agent instance operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentInstanceOperationSchema"
          }
        },
        "id": {
          "type": "string",
          "example": "filebeat@apache",
          "description": "Id of the agent instance installed in an execution environment."
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from execution environments.",
          "description": "Short description of the agent installed in the execution environment."
        },
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment where the agent instance is installed."
        }
      },
      "required": [
        "agent_catalog_id",
        "exec_env_id",
        "id",
        "status"
      ]
    },
    "AlgorithmCatalogParameterSchema": {
      "type": "object",
      "properties": {
        "example": {
          "example": "10s",
          "description": "Example of parameter value."
        },
        "id": {
          "type": "string",
          "example": "frequency",
          "description": "Parameter id."
        },
        "type": {
          "type": "string",
          "enum": [
            "binary",
            "boolean",
            "choice",
            "integer",
            "number",
            "time-duration",
            "string"
          ],
          "example": "binary",
          "description": "Parameter type."
        },
        "description": {
          "type": "string",
          "example": "Enable the algorithm.",
          "description": "Short description of the parameter."
        },
        "values": {
          "type": "array",
          "example": "mysql",
          "description": "Possible values if the parameter type is choice.",
          "items": {
            "type": "string"
          }
        },
        "list": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the parameter can have multiple values."
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "AlgorithmCatalogSchema": {
      "type": "object",
      "properties": {
        "encoding_scheme": {
          "type": "string",
          "example": "base64",
          "description": "Encoding scheme used to store the binary data"
        },
        "id": {
          "type": "string",
          "example": "ddos-prediction",
          "description": "Id of the algorithm in the catalog."
        },
        "parameters": {
          "description": "Parameter properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlgorithmCatalogParameterSchema"
          }
        },
        "description": {
          "type": "string",
          "example": "Predict DDoS attacks.",
          "description": "Short description of the algorithm."
        }
      },
      "required": [
        "id"
      ]
    },
    "AlgorithmInstanceParameterSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "period",
          "description": "Parameter id."
        }
      },
      "required": [
        "id"
      ]
    },
    "AlgorithmInstanceOperationSchema": {
      "type": "object",
      "properties": {
        "parameters": {
          "description": "List of algorithm instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlgorithmInstanceParameterSchema"
          }
        }
      }
    },
    "AlgorithmInstanceSchema": {
      "type": "object",
      "properties": {
        "algorithm_catalog_id": {
          "type": "string",
          "example": "ddos-predictor",
          "description": "Id of the algorithm in the catalog."
        },
        "operations": {
          "description": "List of algorithm instance operations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlgorithmInstanceOperationSchema"
          }
        },
        "endpoint": {
          "type": "string",
          "example": "10.0.0.1:9999",
          "description": "URL where the RESTable instance is running including the TCP port."
        },
        "id": {
          "type": "string",
          "example": "ddos-predictor-1",
          "description": "Id of the algorithm instance."
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from execution environments.",
          "description": "Short description of the algorithm installed in the execution environment."
        }
      },
      "required": [
        "algorithm_catalog_id",
        "endpoint",
        "id"
      ]
    },
    "ConnectionSchema": {
      "type": "object",
      "properties": {
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the connected execution environment."
        },
        "network_link_id": {
          "type": "string",
          "example": "net-link-1",
          "description": "Id of the connected network link."
        },
        "id": {
          "type": "string",
          "example": "conn-1",
          "description": "Id of connection."
        },
        "description": {
          "type": "string",
          "example": "Added to this network for debug purposes.",
          "description": "Short description of the connection."
        }
      },
      "required": [
        "exec_env_id",
        "id",
        "network_link_id"
      ]
    },
    "DataSchema": {
      "type": "object",
      "properties": {
        "agent_instance_id": {
          "type": "string",
          "example": "filebeat@apache",
          "description": "Id of the agent instance in the execution environment that collected the data"
        },
        "ebpf_program_instance_id": {
          "type": "string",
          "example": "packet-capture@apache",
          "description": "Id of the eBPF program instance in the execution environment that collected the data"
        },
        "id": {
          "type": "string",
          "example": "BXrHRn5RPU55Qh9JwMZn",
          "description": "Id of the data."
        },
        "timestamp_event": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp of the event related to the collected data"
        },
        "timestamp_agent": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the agent instance collected the data"
        }
      },
      "required": [
        "id"
      ]
    },
    "_eBPFProgramCatalogParameterSchema": {
      "type": "object",
      "properties": {
        "example": {
          "example": "eno0",
          "description": "Example of parameter value."
        },
        "id": {
          "type": "string",
          "example": "interface",
          "description": "Parameter id."
        },
        "type": {
          "type": "string",
          "enum": [
            "binary",
            "boolean",
            "choice",
            "integer",
            "number",
            "time-duration",
            "string"
          ],
          "description": "Parameter type.",
          "example": "integer"
        },
        "description": {
          "type": "string",
          "example": "Network Interface to attach.",
          "description": "Short description of the parameter."
        },
        "values": {
          "type": "array",
          "example": "yes",
          "description": "Possible values if the parameter type is choice.",
          "items": {
            "type": "string"
          }
        },
        "list": {
          "type": "boolean",
          "example": true,
          "description": "Indicate if the parameter can have multiple values."
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "_eBPFProgramCatalogConfigMetricOpenMetricsMetadataLabelSchema": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "example": "UDP",
          "description": "Label value."
        },
        "name": {
          "type": "string",
          "example": "IP_PROTO",
          "description": "Label name."
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "_eBPFProgramCatalogConfigMetricOpenMetricsMetadataSchema": {
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels of Open Metrics Metadata.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/_eBPFProgramCatalogConfigMetricOpenMetricsMetadataLabelSchema"
          }
        },
        "help": {
          "type": "string",
          "example": "This metric represents the number of packets that has travelled trough this probe.",
          "description": "Metric help."
        },
        "type": {
          "type": "string",
          "example": "counter",
          "description": "Metric type."
        }
      },
      "required": [
        "type"
      ]
    },
    "_eBPFProgramCatalogConfigMetricSchema": {
      "type": "object",
      "properties": {
        "open-metrics-metadata": {
          "description": "Open Metrics Metadata.",
          "allOf": [
            {
              "$ref": "#/definitions/_eBPFProgramCatalogConfigMetricOpenMetricsMetadataSchema"
            }
          ]
        },
        "name": {
          "type": "string",
          "example": "packets_total",
          "description": "Metric name."
        },
        "map-name": {
          "type": "string",
          "example": "PKT_COUNTER",
          "description": "Mapping value in the code."
        }
      },
      "required": [
        "map-name",
        "name"
      ]
    },
    "_eBPFProgramCatalogConfigSchema": {
      "type": "object",
      "properties": {
        "metrics": {
          "description": "eBPF program metrics.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/_eBPFProgramCatalogConfigMetricSchema"
          }
        },
        "code": {
          "type": "array",
          "description": "Code of the eBPF program.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "code"
      ]
    },
    "_eBPFProgramCatalogSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "packet-capture",
          "description": "Id of the eBPF_Program_ in the catalog."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_eBPFProgramCatalogParameterSchema"
          }
        },
        "description": {
          "type": "string",
          "example": "Transparent service to capture packets flowing through the interface it is attached to, apply filters and obtain capture in .pcap format.",
          "description": "Description of eBPF program."
        },
        "config": {
          "$ref": "#/definitions/_eBPFProgramCatalogConfigSchema"
        }
      },
      "required": [
        "config",
        "id"
      ]
    },
    "_eBPFProgramInstanceParameterSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "interface",
          "description": "Parameter id."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp of the last time the parameter was set."
        }
      },
      "required": [
        "id"
      ]
    },
    "_eBPFProgramInstanceSchema": {
      "type": "object",
      "properties": {
        "ebpf_program_catalog_id": {
          "type": "string",
          "example": "packet-capture",
          "description": "Id of the agent in the catalog."
        },
        "id": {
          "type": "string",
          "example": "packet-capture@apache",
          "description": "Id of the eBPF program installed in an execution environment."
        },
        "description": {
          "type": "string",
          "example": "Collect system metrics from Apache HTTP Web Server.",
          "description": "Short description of the agent installed in the execution environment."
        },
        "exec_env_id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment where the eBPF program instance is installed"
        },
        "parameters": {
          "description": "List of eBPF program instance parameters.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/_eBPFProgramInstanceParameterSchema"
          }
        }
      },
      "required": [
        "ebpf_program_catalog_id",
        "exec_env_id",
        "id"
      ]
    },
    "EventSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "BXrHRn5RPU55Qh9JwMZn",
          "description": "Id of the event."
        }
      },
      "required": [
        "id"
      ]
    },
    "LCPSchema": {
      "type": "object",
      "properties": {
        "last_heartbeat": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:33",
          "description": "Timestamp of the expiration of the API access configuration."
        },
        "port": {
          "type": "integer",
          "example": 5000,
          "description": "TCP port number of LCP in the execution environment."
        },
        "endpoint": {
          "type": "string",
          "example": "lcp",
          "description": "URL Endpoint to connect with the LCP."
        },
        "https": {
          "type": "boolean",
          "example": true,
          "description": "Communication with the LCP using HTTPS."
        },
        "started": {
          "type": "string",
          "format": "date-time",
          "example": "2019/02/14 15:23:30",
          "description": "Timestamp when the LCP is started."
        }
      },
      "required": [
        "https",
        "port"
      ]
    },
    "ExecEnvSchema": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "example": "Yes",
          "description": "Indicate if the execution environment is enabled or not"
        },
        "id": {
          "type": "string",
          "example": "apache",
          "description": "Id of the execution environment."
        },
        "type_id": {
          "type": "string",
          "example": "vm",
          "description": "Id of the execution environment type."
        },
        "description": {
          "type": "string",
          "example": "Apache HTTP Web Server.",
          "description": "Short description of the execution environment,"
        },
        "hostname": {
          "type": "string",
          "example": "192.168.1.2",
          "description": "Hostname of the execution environment."
        },
        "lcp": {
          "description": "Data related to the LCP.",
          "allOf": [
            {
              "$ref": "#/definitions/LCPSchema"
            }
          ]
        }
      },
      "required": [
        "enabled",
        "hostname",
        "id",
        "type_id"
      ]
    },
    "ExecEnvTypeSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "vm",
          "description": "Id of the execution environment type."
        },
        "name": {
          "type": "string",
          "example": "Virtual Machine",
          "description": "Name of the execution environment."
        },
        "description": {
          "type": "string",
          "example": "Linux container.",
          "description": "Short description of the type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "NetworkLinkSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "net-link-1",
          "description": "Id of the network link."
        },
        "type_id": {
          "type": "string",
          "example": "pnt2pnt",
          "description": "Id of the network link type."
        },
        "description": {
          "type": "string",
          "example": "Allow communication between front-end and back-end services.",
          "description": "Short description of the network link"
        }
      },
      "required": [
        "id",
        "type_id"
      ]
    },
    "NetworkLinkTypeSchema": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "pnt2pnt",
          "description": "Id of the network link type."
        },
        "name": {
          "type": "string",
          "example": "Point to point",
          "description": "Name of the network link type."
        },
        "description": {
          "type": "string",
          "example": "Communications connection between two communication endpoints.",
          "description": "Short description of the network link type."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "PipelineSchema": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Pipeline status.",
          "example": "started"
        },
        "name": {
          "type": "string",
          "description": "Used by the UI to create a new pipeline.",
          "example": "test pipeline guard-vdpi ud"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": 1617278285,
          "description": "Date of creation of the pipeline in Unix timestamp format."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Date of last update of the pipeline in Unix timestamp format.",
          "example": 1617278285
        },
        "id": {
          "type": "string",
          "example": "BXrHRn5RPU55Qh9JwMZn",
          "description": "Id of the pipeline."
        },
        "user": {
          "type": "string",
          "description": "User/Entity owner/manager/responsible of the pipeline.",
          "example": "Minds & Sparks"
        }
      },
      "required": [
        "created_at",
        "id",
        "status"
      ]
    }
  }
}